// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CheckCollision
struct Collider
{
    float3 pos;
    float range;
};

struct Collision
{
    float collided;
    float collisionIx;
};

RWStructuredBuffer<Collider> Colliders;
RWStructuredBuffer<Collision> Collisions;
float CollidersLenght;
// if we think computer shader as sending instruction to multiple computers
// shader.dispatch(ix, 3,3,1) is saying we need 3x3x1 = 9 computer
[numthreads(32, 1, 1)] //number threads(2,2,2) is saying in each of the computer we need 2x2x2 = 8 threads 
void CheckCollision(uint3 id : SV_DispatchThreadID)
{
    Collider colliderA = Colliders[id.x];
    Collisions[id.x].collided = 0;
    Collisions[id.x].collisionIx = -1;
    for (int i = 0; i < CollidersLenght; i++)
    {
        if (i == id.x) continue;
        Collider colliderB = Colliders[i];
        float dist = sqrt(pow(colliderA.pos.x - colliderB.pos.x, 2) + pow(colliderA.pos.y - colliderB.pos.y, 2) + pow(colliderA.pos.z - colliderB.pos.z, 2));
        if (dist <= colliderA.range + colliderB.range)
        {
            Collisions[id.x].collided = 1;
            Collisions[id.x].collisionIx = i;
        }
    }
}
